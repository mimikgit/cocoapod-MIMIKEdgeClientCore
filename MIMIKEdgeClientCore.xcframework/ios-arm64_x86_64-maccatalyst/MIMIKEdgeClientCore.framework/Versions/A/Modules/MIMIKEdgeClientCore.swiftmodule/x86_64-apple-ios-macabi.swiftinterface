// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios15.0-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MIMIKEdgeClientCore
import Alamofire
import AppAuth
import Foundation
import JWTDecode
import Swift
import SwiftyJSON
import UIKit
import UniformTypeIdentifiers
import _Concurrency
import os.log
import os
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  final public class func responseDataJSON(response: Alamofire.AFDataResponse<Foundation.Data>, mockName: Swift.String? = nil) -> Swift.Result<SwiftyJSON.JSON, Foundation.NSError>
  final public class func pagingInfo(response: Alamofire.AFDataResponse<Foundation.Data>, pagingHandler: (_ paging: MIMIKEdgeClientCore.MIMIKEdgeClient.PagingInfo?) -> Swift.Void, mockName: Swift.String? = nil)
  final public class func responseDataJSON(data: Foundation.Data) -> Swift.Result<SwiftyJSON.JSON, Foundation.NSError>
  final public class func responseDataKeyJSON(response: Alamofire.AFDataResponse<Foundation.Data>, key: Swift.String) -> SwiftyJSON.JSON
  final public class func responseError(response: Alamofire.AFDataResponse<Foundation.Data>) -> Foundation.NSError?
  @available(*, deprecated, renamed: "responseDataJSON")
  final public class func validateResponse(response: Alamofire.AFDataResponse<Foundation.Data>, key: Swift.String = "data") -> (dataJSON: SwiftyJSON.JSON?, error: Swift.Error?)
  @available(*, deprecated, renamed: "responseDataJSON")
  final public class func validateSuccess(data: Any, key: Swift.String = "data") -> (dataJSON: SwiftyJSON.JSON?, error: Swift.Error?)
  @available(*, deprecated, renamed: "responseError")
  final public class func checkResponseForError(response: Foundation.HTTPURLResponse?) -> Swift.Error?
  @available(*, deprecated, renamed: "responseError")
  final public class func foundAndPrintedModelError(response: Alamofire.AFDataResponse<Foundation.Data>) -> Swift.Bool
  @available(*, deprecated, renamed: "responseError")
  final public class func responseHasError(response: Alamofire.AFDataResponse<Any>) -> Swift.Error?
  @available(*, deprecated, renamed: "responseError")
  final public class func responseHasError(response: Alamofire.AFDataResponse<Any?>) -> Swift.Error?
  @available(*, deprecated, renamed: "responseError")
  final public class func responseHasError(response: Alamofire.AFDataResponse<Foundation.Data?>) -> Swift.Error?
}
@objc public class MIMIKDriveFileData : ObjectiveC.NSObject, Foundation.NSCoding, Swift.Codable {
  public var kind: Swift.String?
  public var files: [MIMIKEdgeClientCore.MIMIKDriveFile]?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public init(kind: Swift.String?, files: [MIMIKEdgeClientCore.MIMIKDriveFile]?)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  public class func parseFiles(data: Foundation.Data) -> [MIMIKEdgeClientCore.MIMIKDriveFile]?
  public class func parseFile(data: Foundation.Data) -> MIMIKEdgeClientCore.MIMIKDriveFile?
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct JSONDataEncoding : Alamofire.ParameterEncoding {
  public func encode(_ urlRequest: Alamofire.URLRequestConvertible, with parameters: Alamofire.Parameters?) throws -> Foundation.URLRequest
  public static func encodingParameters(jsonData: Foundation.Data?) -> Alamofire.Parameters?
}
extension MIMIKEdgeClientCore.MIMIKBeamProvider {
  public struct CreateBeam {
    public var sourceNodeId: Swift.String
    public var destinationNodeId: Swift.String
    public var mimeType: Swift.String
    public var name: Swift.String
    public var thumbnailBase64: Swift.String
    public var filename: Swift.String
    public var expiration: Swift.Int64
    public var localStoragePath: Swift.String
    public init(sourceNodeId: Swift.String, destinationNodeId: Swift.String, mimeType: Swift.String, name: Swift.String, thumbnailBase64: Swift.String, filename: Swift.String, expiration: Swift.Int64, localStoragePath: Swift.String)
  }
  
  #if compiler(>=5.3) && $AsyncAwait
  public class func create(beam: MIMIKEdgeClientCore.MIMIKBeamProvider.CreateBeam, userAccessToken: Swift.String, edgeEngineRuntimeLink: Foundation.URLComponents, superdriveMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice, beamOwnerCode: Swift.String) async -> Swift.Bool
  #endif

}
@objc public class MIMIKBeamData : ObjectiveC.NSObject, Foundation.NSCoding, Swift.Codable {
  public var data: [MIMIKEdgeClientCore.MIMIKBeam]?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public init(data: [MIMIKEdgeClientCore.MIMIKBeam]?)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  public class func parseBeams(data: Foundation.Data) -> [MIMIKEdgeClientCore.MIMIKBeam]?
  public class func parseBeam(data: Foundation.Data) -> MIMIKEdgeClientCore.MIMIKBeam?
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class MIMIKBeam : ObjectiveC.NSObject, Foundation.NSCoding, Swift.Codable {
  public enum ReadStatus : Swift.String {
    case unknown
    case read
    case unread
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum AccessStatus {
    case ready(message: Swift.String)
    case error(message: Swift.String)
    public func message() -> Swift.String
  }
  public var id: Swift.String?
  public var name: Swift.String?
  public var mimeType: Swift.String?
  public var url: Swift.String?
  public var nodeId: Swift.String?
  public var createTime: Swift.String?
  public var readStatus: Swift.String?
  public var thumbnailContentHint: MIMIKEdgeClientCore.MIMIKBeamThumbnail?
  public var deletableTime: Swift.String?
  public var expirationDate: Foundation.Date {
    get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public init(id: Swift.String?, name: Swift.String?, mimeType: Swift.String?, url: Swift.String?, nodeId: Swift.String?, createTime: Swift.String?, readStatus: Swift.String?, deletableTime: Swift.String?, thumbnailContentHint: MIMIKEdgeClientCore.MIMIKBeamThumbnail?)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  public class func defaultNodeName() -> Swift.String
  public func readStatusEnum() -> MIMIKEdgeClientCore.MIMIKBeam.ReadStatus
  public func filename() -> Swift.String?
  public func fileExtension() -> Swift.String?
  public func uttype() -> UniformTypeIdentifiers.UTType?
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.IdentityResponse {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case connection
    case provider
    case userId
    case isSocial
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.IdentityUser {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case userId
    case email
    case phoneNumber
    case roles
    case identities
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension Swift.String : Swift.CodingKey {
  public var stringValue: Swift.String {
    get
  }
  public init?(stringValue: Swift.String)
  public var intValue: Swift.Int? {
    get
  }
  public init?(intValue: Swift.Int)
}
extension Swift.KeyedEncodingContainerProtocol {
  public mutating func encodeArray<T>(_ values: [T], forKey key: Self.Key) throws where T : Swift.Encodable
  public mutating func encodeArrayIfPresent<T>(_ values: [T]?, forKey key: Self.Key) throws where T : Swift.Encodable
  public mutating func encodeMap<T>(_ pairs: [Self.Key : T]) throws where T : Swift.Encodable, Self.Key : Swift.Hashable
  public mutating func encodeMapIfPresent<T>(_ pairs: [Self.Key : T]?) throws where T : Swift.Encodable, Self.Key : Swift.Hashable
}
extension Swift.KeyedDecodingContainerProtocol {
  public func decodeArray<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T] where T : Swift.Decodable
  public func decodeArrayIfPresent<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T]? where T : Swift.Decodable
  public func decodeMap<T>(_ type: T.Type, excludedKeys: Swift.Set<Self.Key>) throws -> [Self.Key : T] where T : Swift.Decodable, Self.Key : Swift.Hashable
}
@objc @_inheritsConvenienceInitializers public class MIMIKMicroservice : ObjectiveC.NSObject {
  public enum MicroserviceType : Swift.String {
    case mbeam
    case superdrive
    case mdebug
    case drive
    case other
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public var type: MIMIKEdgeClientCore.MIMIKMicroservice.MicroserviceType?
  public var container: MIMIKEdgeClientCore.MIMIKMicroserviceContainer?
  public var image: MIMIKEdgeClientCore.MIMIKMicroserviceImage?
  public var imageTarPath: Swift.String?
  public var clientId: Swift.String?
  public var apiKey: Swift.String?
  convenience public init?(type: MIMIKEdgeClientCore.MIMIKMicroservice.MicroserviceType, image: MIMIKEdgeClientCore.MIMIKMicroserviceImage, container: MIMIKEdgeClientCore.MIMIKMicroserviceContainer)
  public class func validateMicroserviceResponse(response: Alamofire.AFDataResponse<Any>, encapsulatedData: Swift.Bool = false) -> (dataJSON: SwiftyJSON.JSON?, error: Swift.Error?)
  public class func microserviceConfiguration(type: MIMIKEdgeClientCore.MIMIKMicroservice.MicroserviceType, edgeEngineUrlComponents: Foundation.URLComponents, clientId: Swift.String, signatureKey: Swift.String, ownerCode: Swift.String) -> MIMIKEdgeClientCore.MIMIKMicroserviceConfig?
  public class func expectedCustomImageId(imageName: Swift.String, clientId: Swift.String) -> Swift.String
  public func baseApiPath() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MIMIKService : ObjectiveC.NSObject, Foundation.NSCoding {
  public enum ServiceType : Swift.String, Swift.CaseIterable {
    case tracker
    case notification
    case assessment
    case peer
    case profile
    case thumbnail
    case identity
    case finance
    case contest
    case content
    case unknown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [MIMIKEdgeClientCore.MIMIKService.ServiceType]
    public typealias RawValue = Swift.String
    public static var allCases: [MIMIKEdgeClientCore.MIMIKService.ServiceType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var type: MIMIKEdgeClientCore.MIMIKService.ServiceType
  public var rootUrl: Foundation.URL
  public var clientId: Swift.String
  public var expectedSwaggerFileVersion: Swift.String?
  public var healthCheckPath: Swift.String?
  public var authScopes: [Swift.String]?
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  public init(type: MIMIKEdgeClientCore.MIMIKService.ServiceType, rootUrl: Foundation.URL, clientId: Swift.String, expectedSwaggerFileVersion: Swift.String?, healthCheckPath: Swift.String?, authScopes: [Swift.String]? = [])
  @objc public func encode(with aCoder: Foundation.NSCoder)
  public func urlComponents() -> Foundation.URLComponents?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MIMIKSwaggerMock : ObjectiveC.NSObject {
  @available(*, deprecated, renamed: "MIMIKEdgeClient.responseDataJSON")
  public class func validateResponse(mockName: Swift.String?, response: Alamofire.AFDataResponse<Foundation.Data>?) -> (dataJSON: SwiftyJSON.JSON?, error: Swift.Error?)
  @available(*, deprecated, renamed: "MIMIKEdgeClient.pagingInfo")
  public class func processPagingInfo(mockName: Swift.String, response: Alamofire.AFDataResponse<Foundation.Data>, pagingHandler: (_ paging: MIMIKEdgeClientCore.MIMIKEdgeClient.PagingInfo?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MIMIKBeamProvider : ObjectiveC.NSObject {
  
  #if compiler(>=5.3) && $AsyncAwait
  public class func beams(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beamOwnerCode: Swift.String, beamMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKBeam], Foundation.NSError>
  #endif

  @objc override dynamic public init()
  @objc deinit
}
extension MIMIKEdgeClientCore.MIMIKBeamProvider {
  
  #if compiler(>=5.3) && $AsyncAwait
  public class func beamTokens(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beamOwnerCode: Swift.String, beamMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice) async -> [MIMIKEdgeClientCore.MIMIKBeamToken]?
  #endif

}
extension MIMIKEdgeClientCore.MIMIKBeamProvider {
  
  #if compiler(>=5.3) && $AsyncAwait
  public class func effectiveBeamUrl(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beam: MIMIKEdgeClientCore.MIMIKBeam, beamOwnerCode: Swift.String, superdriveMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice) async -> Swift.Result<Foundation.URL, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  public class func downloadBeamFile(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beam: MIMIKEdgeClientCore.MIMIKBeam, storageUrl: Foundation.URL, beamOwnerCode: Swift.String, superdriveMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice) async -> Swift.Result<Foundation.URL, Foundation.NSError>
  #endif

}
public struct APIHelper {
  public static func rejectNil(_ source: [Swift.String : Any?]) -> [Swift.String : Any]?
  public static func rejectNilHeaders(_ source: [Swift.String : Any?]) -> [Swift.String : Swift.String]
  public static func convertBoolToString(_ source: [Swift.String : Any]?) -> [Swift.String : Any]?
  public static func mapValuesToQueryItems(_ source: [Swift.String : Any?]) -> [Foundation.URLQueryItem]?
}
@objc @_inheritsConvenienceInitializers public class MIMIKMicroserviceImage : ObjectiveC.NSObject {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public var id: Swift.String?
  public var digest: Swift.String?
  public var created: Swift.Double
  public var name: Swift.String?
  public var size: Swift.Int
  public var repoTags: SwiftyJSON.JSON?
  public var fullJSON: SwiftyJSON.JSON?
  convenience public init?(json: SwiftyJSON.JSON)
  @objc override dynamic public init()
  @objc deinit
}
extension MIMIKEdgeClientCore.MIMIKBeamProvider {
  
  #if compiler(>=5.3) && $AsyncAwait
  public class func deleteBeam(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beam: MIMIKEdgeClientCore.MIMIKBeam, beamOwnerCode: Swift.String, beamMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKBeam, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  public class func updateBeam(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beam: MIMIKEdgeClientCore.MIMIKBeam, status: MIMIKEdgeClientCore.MIMIKBeam.ReadStatus, beamOwnerCode: Swift.String, beamMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKBeam, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  public class func openBeam(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beam: MIMIKEdgeClientCore.MIMIKBeam, beamOwnerCode: Swift.String, superdriveMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKBeam, Foundation.NSError>
  #endif

}
@objc public class MIMIKMicroserviceConfig : ObjectiveC.NSObject {
  public var type: MIMIKEdgeClientCore.MIMIKMicroservice.MicroserviceType
  public var imageName: Swift.String
  public var containerName: Swift.String
  public var baseApiPath: Swift.String
  public var envVariables: [Swift.String : Swift.String]
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public init(type: MIMIKEdgeClientCore.MIMIKMicroservice.MicroserviceType, imageName: Swift.String, containerName: Swift.String, baseApiPath: Swift.String, envVariables: [Swift.String : Swift.String])
  @objc deinit
}
extension MIMIKEdgeClientCore.MIMIKDriveProvider {
  
  #if compiler(>=5.3) && $AsyncAwait
  public class func delete(file: MIMIKEdgeClientCore.MIMIKDriveFile, userAccessToken: Swift.String, edgeEngineRuntimeLink: Foundation.URLComponents, driveMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice, driveOwnerCode: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKDriveFile, Foundation.NSError>
  #endif

}
@objc public class MIMIKBeamToken : ObjectiveC.NSObject, Foundation.NSCoding, Swift.Codable {
  public enum TokenStatus : Swift.String {
    case unknown
    case active
    case cancelled
    case expired
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String?
  public var token: Swift.String?
  public var name: Swift.String?
  public var mimeType: Swift.String?
  public var toNodeId: Swift.String?
  public var expires: Swift.Int64?
  public var url: Swift.String?
  public var playQueueUrl: Swift.String?
  public var status: Swift.String?
  public var viewCount: Swift.Int64?
  public var lastViewedAt: Swift.Int64?
  public var thumbnailContentHint: MIMIKEdgeClientCore.MIMIKBeamThumbnail?
  public var expirationDate: Foundation.Date {
    get
  }
  public var lastViewedDate: Foundation.Date? {
    get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public init(id: Swift.String?, token: Swift.String?, name: Swift.String?, mimeType: Swift.String?, toNodeId: Swift.String?, expires: Swift.Int64?, url: Swift.String?, playQueueUrl: Swift.String?, status: Swift.String?, viewCount: Swift.Int64?, lastViewedAt: Swift.Int64?, thumbnailContentHint: MIMIKEdgeClientCore.MIMIKBeamThumbnail?)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  public func isExpired() -> Swift.Bool
  public func tokenStatus() -> MIMIKEdgeClientCore.MIMIKBeamToken.TokenStatus
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class MIMIKMicroserviceContainer : ObjectiveC.NSObject {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public var imageId: Swift.String?
  public var image: Swift.String?
  public var state: Swift.String?
  public var created: Swift.Double
  public var name: Swift.String?
  public var id: Swift.String?
  public var env: [Swift.String : Any]?
  public var fullJSON: SwiftyJSON.JSON?
  convenience public init?(json: SwiftyJSON.JSON)
  public func mcmBaseApiPath() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public struct MIMIKMicroserviceEmbedError : Swift.Codable {
  public var statusCode: Swift.Int
  public var message: Swift.String
  public init(statusCode: Swift.Int, message: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc final public class MIMIKEdgeClient : ObjectiveC.NSObject {
  public enum Backend : Swift.String {
    case development
    case qa
    case staging
    case production
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  required public init?(userAuthorization: MIMIKEdgeClientCore.MIMIKAuthorization?)
  final public class func setLoggingLevel(level: MIMIKEdgeClientCore.MIMIKLog.Level, subsystem: MIMIKEdgeClientCore.MIMIKLog.SubSystem = .mimikEdgeClient)
  final public class func selectBackend(backend: MIMIKEdgeClientCore.MIMIKEdgeClient.Backend)
  final public class func selectedBackend() -> MIMIKEdgeClientCore.MIMIKEdgeClient.Backend
  final public class func activateExternalEdgeEngine(host: Swift.String, port: Swift.Int) -> Swift.Result<Foundation.URLComponents, Foundation.NSError>
  final public class func externalEdgeEngineActivated() -> Swift.Bool
  final public func setUserAuthorization(authorization: MIMIKEdgeClientCore.MIMIKAuthorization) -> Swift.Result<Swift.Bool, Foundation.NSError>
  final public func removeUserAuthorization()
  final public func userAuthorization() -> MIMIKEdgeClientCore.MIMIKAuthorization?
  
  #if compiler(>=5.3) && $AsyncAwait
  final public func healthCheck(service: MIMIKEdgeClientCore.MIMIKService, requireMatch: Swift.Bool = false) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKHealthCheck.Response, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployMicroservice(edgeEngineAccessToken: Swift.String, config: MIMIKEdgeClientCore.MIMIKMicroserviceConfig, imageTarPath: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKMicroservice, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func undeployMicroservice(edgeEngineAccessToken: Swift.String, config: MIMIKEdgeClientCore.MIMIKMicroserviceConfig) async -> Swift.Result<Swift.Bool, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployedMicroservices(edgeEngineAccessToken: Swift.String) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKMicroservice], Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func verifyDeployedMicroserviceMatching(imageId: Swift.String, edgeEngineAccessToken: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKMicroservice, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployedMicroserviceImages(edgeEngineAccessToken: Swift.String) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKMicroserviceImage], Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployedMicroserviceContainers(edgeEngineAccessToken: Swift.String) async -> Swift.Result<[MIMIKEdgeClientCore.MIMIKMicroserviceContainer], Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func edgeEngineIdToken() async -> Swift.Result<Swift.String, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func edgeEngineInfo() async -> Swift.Result<SwiftyJSON.JSON, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func externalEdgeEngineIsRunning() async -> Swift.Bool
  #endif

  final public func edgeEngineUrlComponents() -> Foundation.URLComponents
  final public func edgeEngineUrlString() -> Swift.String
  @objc deinit
}
public enum JSONValue : Swift.Codable, Swift.Equatable {
  case string(Swift.String)
  case int(Swift.Int)
  case double(Swift.Double)
  case bool(Swift.Bool)
  case object([Swift.String : MIMIKEdgeClientCore.JSONValue])
  case array([MIMIKEdgeClientCore.JSONValue])
  case null
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: MIMIKEdgeClientCore.JSONValue, b: MIMIKEdgeClientCore.JSONValue) -> Swift.Bool
}
extension MIMIKEdgeClientCore.JSONValue : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension MIMIKEdgeClientCore.JSONValue : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.Int)
  public typealias IntegerLiteralType = Swift.Int
}
extension MIMIKEdgeClientCore.JSONValue : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.Double)
  public typealias FloatLiteralType = Swift.Double
}
extension MIMIKEdgeClientCore.JSONValue : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.Bool)
  public typealias BooleanLiteralType = Swift.Bool
}
extension MIMIKEdgeClientCore.JSONValue : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, MIMIKEdgeClientCore.JSONValue)...)
  public typealias Key = Swift.String
  public typealias Value = MIMIKEdgeClientCore.JSONValue
}
extension MIMIKEdgeClientCore.JSONValue : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: MIMIKEdgeClientCore.JSONValue...)
  public typealias ArrayLiteralElement = MIMIKEdgeClientCore.JSONValue
}
extension MIMIKEdgeClientCore.JSONValue {
  public func decodeJSONValue<T>() throws -> T where T : Swift.Decodable
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  final public class func manuallySelectedBackend() -> MIMIKEdgeClientCore.MIMIKEdgeClient.Backend?
  final public class func applicationBackend() -> MIMIKEdgeClientCore.MIMIKEdgeClient.Backend
  final public class func forceDefaultBackendSelection()
  final public class func defaultBackend() -> MIMIKEdgeClientCore.MIMIKEdgeClient.Backend
}
@objc @_inheritsConvenienceInitializers public class MIMIKClusterProvider : ObjectiveC.NSObject {
  public enum ClusterType : Swift.String {
    case nearby
    case account
    case friend
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  
  #if compiler(>=5.3) && $AsyncAwait
  public class func findNodes(type: MIMIKEdgeClientCore.MIMIKClusterProvider.ClusterType, userAccessToken: Swift.String, beamOwnerCode: Swift.String, edgeServiceLink: Swift.String, superdriveMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice) async -> [MIMIKEdgeClientCore.MIMIKNode]?
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  public class func findNodesDebugJson(type: MIMIKEdgeClientCore.MIMIKClusterProvider.ClusterType, userAccessToken: Swift.String, beamOwnerCode: Swift.String, edgeServiceLink: Swift.String, superdriveMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice) async -> SwiftyJSON.JSON?
  #endif

  @objc override dynamic public init()
  @objc deinit
}
@objc public class MIMIKNodeData : ObjectiveC.NSObject, Foundation.NSCoding, Swift.Codable {
  public var type: Swift.String?
  public var data: [MIMIKEdgeClientCore.MIMIKNode]?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public init(type: Swift.String?, data: [MIMIKEdgeClientCore.MIMIKNode]?)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  public class func parseNodes(data: Foundation.Data) -> [MIMIKEdgeClientCore.MIMIKNode]?
  public class func parseNode(data: Foundation.Data) -> MIMIKEdgeClientCore.MIMIKNode?
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public typealias EncodeResult = (data: Foundation.Data?, error: Swift.Error?)
@_hasMissingDesignatedInitializers open class CodableHelper {
  public static var dateformatter: Foundation.DateFormatter?
  open class func decode<T>(_ type: T.Type, from data: Foundation.Data) -> (decodableObj: T?, error: Swift.Error?) where T : Swift.Decodable
  open class func encode<T>(_ value: T, prettyPrint: Swift.Bool = false) -> MIMIKEdgeClientCore.EncodeResult where T : Swift.Encodable
  @objc deinit
}
extension MIMIKEdgeClientCore.MIMIKDriveProvider {
  public struct CreateFile {
    public var name: Swift.String
    public var mimeType: Swift.String
    public var localId: Swift.String
    public var thumbnailBase64: Swift.String
    public var storageUrl: Foundation.URL
    public init(name: Swift.String, mimeType: Swift.String, localId: Swift.String, thumbnailBase64: Swift.String, storageUrl: Foundation.URL)
  }
  
  #if compiler(>=5.3) && $AsyncAwait
  public class func create(file: MIMIKEdgeClientCore.MIMIKDriveProvider.CreateFile, userAccessToken: Swift.String, edgeEngineRuntimeLink: Foundation.URLComponents, driveMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice, driveOwnerCode: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKDriveFile, Foundation.NSError>
  #endif

}
extension MIMIKEdgeClientCore.MIMIKClusterProvider {
  
  #if compiler(>=5.3) && $AsyncAwait
  public class func nodePresenceCheck(beam: MIMIKEdgeClientCore.MIMIKBeam, userAccessToken: Swift.String, beamOwnerCode: Swift.String, edgeServiceLink: Swift.String, superdriveMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKNode, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  public class func nodePresenceCheck(node: MIMIKEdgeClientCore.MIMIKNode, userAccessToken: Swift.String, beamOwnerCode: Swift.String, edgeServiceLink: Swift.String, superdriveMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKNode, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  public class func nodePresenceCheck(nodeId: Swift.String, userAccessToken: Swift.String, beamOwnerCode: Swift.String, edgeServiceLink: Swift.String, superdriveMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKNode, Foundation.NSError>
  #endif

}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  final public class func convertStringToDictionary(text: Swift.String) -> [Swift.String : Any]?
}
extension Swift.String {
  public func base64Encoded() -> Swift.String?
  public func base64Decoded() -> Swift.String?
}
extension Foundation.Formatter {
  public static let iso8601: Foundation.DateFormatter
  public static let iso8601NoMillis: Foundation.DateFormatter
}
extension Foundation.Date {
  public var trackerISO8601NoMillis: Swift.String {
    get
  }
}
extension Foundation.Formatter {
  public static let trackerISO8601NoMillis: Foundation.DateFormatter
}
extension Foundation.Date {
  public static var startOfToday: Foundation.Date? {
    get
  }
  public static var startOfYesterday: Foundation.Date? {
    get
  }
  public var iso8601: Swift.String {
    get
  }
  public var iso8601NoMillis: Swift.String {
    get
  }
  public static func tomorrow() -> Foundation.Date?
  public static func yesterday() -> Foundation.Date?
  public func toString(format: Swift.String = "yyyy-MM-dd") -> Swift.String
  public func get(_ components: Foundation.Calendar.Component..., calendar: Foundation.Calendar = Calendar.current) -> Foundation.DateComponents
  public func get(_ component: Foundation.Calendar.Component, calendar: Foundation.Calendar = Calendar.current) -> Swift.Int
}
extension Swift.String {
  public func iso8601Date() -> Foundation.Date?
  public func iso8601DateNoMillis() -> Foundation.Date?
}
@objc public class MIMIKBeamThumbnail : ObjectiveC.NSObject, Foundation.NSCoding, Swift.Codable {
  public var image: Swift.String?
  public var mimeType: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public init(image: Swift.String?, mimeType: Swift.String?)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class MIMIKDriveFile : ObjectiveC.NSObject, Foundation.NSCoding, Swift.Codable {
  public var id: Swift.String?
  public var kind: Swift.String?
  public var name: Swift.String?
  public var mimeType: Swift.String?
  public var createTime: Swift.String?
  public var localId: Swift.String?
  public var path: Swift.String?
  public var thumbnailLink: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public init(id: Swift.String?, kind: Swift.String?, name: Swift.String?, mimeType: Swift.String?, createTime: Swift.String?, localId: Swift.String?, path: Swift.String?, thumbnailLink: Swift.String?)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  public func contentUrl() -> Foundation.URL?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class MIMIKLog : ObjectiveC.NSObject {
  public enum Level : Swift.Int {
    case debug
    case info
    case error
    case fault
    case off
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum SubSystem {
    case custom(Swift.String)
    case mimikEdgeClient
    case mimikEdgeClientCore
    case mimikEdgeClientEngine
    case mimikEdgeClientUser
    case mimikEdgeClientAdapter
    case mimikEdgeClientAssessment
    case mimikEdgeClientContentCache
    case mimikEdgeClientContest
    case mimikEdgeClientContents
    case mimikEdgeClientFinance
    case mimikEdgeClientIdentity
    case mimikEdgeClientNotification
    case mimikEdgeClientProfile
    case mimikEdgeClientPeer
    case mimikEdgeClientThumbnail
    case mimikEdgeClientTracker
    case mimikEdgeClientTracing
    case mimikAccess
    case mimikHealth
  }
  public class func selectedLoggingLevel(subsystem: MIMIKEdgeClientCore.MIMIKLog.SubSystem) -> MIMIKEdgeClientCore.MIMIKLog.Level
  public class func logType(function: Swift.String, line: Swift.Int, items: Any..., type: MIMIKEdgeClientCore.MIMIKLog.Level, subsystem: MIMIKEdgeClientCore.MIMIKLog.SubSystem, marker: Swift.String? = nil, displayPrivately: Swift.Bool = false)
  public class func logInfo(function: Swift.String, line: Swift.Int, items: Any..., subsystem: MIMIKEdgeClientCore.MIMIKLog.SubSystem, marker: Swift.String? = nil, displayPrivately: Swift.Bool = false)
  public class func logDebug(function: Swift.String, line: Swift.Int, items: Any..., subsystem: MIMIKEdgeClientCore.MIMIKLog.SubSystem, marker: Swift.String? = nil, displayPrivately: Swift.Bool = false)
  public class func logFault(function: Swift.String, line: Swift.Int, items: Any..., subsystem: MIMIKEdgeClientCore.MIMIKLog.SubSystem, marker: Swift.String? = nil, displayPrivately: Swift.Bool = false)
  public class func logError(function: Swift.String, line: Swift.Int, items: Any..., subsystem: MIMIKEdgeClientCore.MIMIKLog.SubSystem, marker: Swift.String? = "⚠️⚠️⚠️", displayPrivately: Swift.Bool = false)
  @objc override dynamic public init()
  @objc deinit
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct IdentityResponse : Swift.Codable {
    public var connection: Swift.String?
    public var provider: Swift.String?
    public var userId: Swift.String?
    public var isSocial: Swift.Bool?
    public init(connection: Swift.String?, provider: Swift.String?, userId: Swift.String?, isSocial: Swift.Bool?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension MIMIKEdgeClientCore.MIMIKDriveProvider {
  public struct CreateManagedFile {
    public var name: Swift.String
    public var mimeType: Swift.String
    public var localId: Swift.String
    public var thumbnailBase64: Swift.String
    public var inputUrl: Foundation.URL
    public init(name: Swift.String, mimeType: Swift.String, localId: Swift.String, thumbnailBase64: Swift.String, inputUrl: Foundation.URL)
    public func filename() -> Swift.String?
    public func storageUrl() -> Foundation.URL?
  }
  
  #if compiler(>=5.3) && $AsyncAwait
  public class func createManaged(file: MIMIKEdgeClientCore.MIMIKDriveProvider.CreateManagedFile, userAccessToken: Swift.String, edgeEngineRuntimeLink: Foundation.URLComponents, driveMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice, driveOwnerCode: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKDriveFile, Foundation.NSError>
  #endif

}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  final public class func uttypeFor(fileExtension: Swift.String) -> UniformTypeIdentifiers.UTType?
  final public class func uttypeFor(mimeType: Swift.String) -> UniformTypeIdentifiers.UTType?
  final public class func fileExtensionFor(type: UniformTypeIdentifiers.UTType) -> Swift.String?
  final public class func fileExtentionFor(mimeType: Swift.String) -> Swift.String?
  final public class func mimeTypeFor(type: UniformTypeIdentifiers.UTType) -> Swift.String?
  final public class func mimeTypeFor(fileExtension: Swift.String) -> Swift.String?
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public struct IdentityUser : Swift.Codable {
    public var userId: Swift.String?
    public var email: Swift.String?
    public var phoneNumber: Swift.String?
    public var roles: [Swift.String]?
    public var identities: MIMIKEdgeClientCore.JSONValue?
    public init(userId: Swift.String?, email: Swift.String?, phoneNumber: Swift.String?, roles: [Swift.String]?, identities: MIMIKEdgeClientCore.JSONValue?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
@_hasMissingDesignatedInitializers open class Configuration {
  public static var dateFormat: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SwaggerClientAPI {
  public static var basePath: Swift.String
  public static var credential: Foundation.URLCredential?
  public static var customHeaders: [Swift.String : Swift.String]
  @objc deinit
}
open class RequestBuilder<T> {
  final public let parameters: [Swift.String : Any]?
  final public let isBody: Swift.Bool
  final public let method: Swift.String
  final public let URLString: Swift.String
  public var onProgressReady: ((Foundation.Progress) -> ())?
  required public init(method: Swift.String, URLString: Swift.String, parameters: [Swift.String : Any]?, isBody: Swift.Bool, headers: [Swift.String : Swift.String] = [:])
  open func addHeaders(_ aHeaders: [Swift.String : Swift.String])
  open func execute(_ completion: @escaping (_ response: MIMIKEdgeClientCore.Response<T>?, _ error: Swift.Error?) -> Swift.Void)
  public func addHeader(name: Swift.String, value: Swift.String) -> Self
  open func addCredential() -> Self
  @objc deinit
}
public protocol RequestBuilderFactory {
  func getNonDecodableBuilder<T>() -> MIMIKEdgeClientCore.RequestBuilder<T>.Type
  func getBuilder<T>() -> MIMIKEdgeClientCore.RequestBuilder<T>.Type where T : Swift.Decodable
}
@objc @_inheritsConvenienceInitializers public class MIMIKJwtTokenHelper : ObjectiveC.NSObject {
  public class func jwtTokenDecoded(token: Swift.String) -> JWTDecode.JWT?
  public class func jwtTokenExpiry(token: Swift.String) -> Foundation.Date?
  public class func jwtTokenInternalCheck(token: Swift.String, type: MIMIKEdgeClientCore.MIMIKAuthorization.TokenType) -> Swift.Bool
  public class func jwtTokenJson(token: Swift.String) -> SwiftyJSON.JSON?
  public class func valueFromToken(token: Swift.String, key: Swift.String, completion: @escaping (_ value: Swift.String?) -> Swift.Void)
  public class func valueFromToken(token: Swift.String, key: Swift.String) -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MIMIKNode : ObjectiveC.NSObject, Foundation.NSCoding, Swift.Codable {
  public var id: Swift.String?
  public var name: Swift.String?
  public var accountId: Swift.String?
  public var os: Swift.String?
  public var url: Swift.String?
  public var routing: MIMIKEdgeClientCore.MIMIKNodeRouting?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public init(id: Swift.String?, name: Swift.String?, accountId: Swift.String?, os: Swift.String?, url: Swift.String?, routing: MIMIKEdgeClientCore.MIMIKNodeRouting?)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  public class func defaultNodeName() -> Swift.String
  @objc public func encode(with aCoder: Foundation.NSCoder)
  public func defaultNodeName() -> Swift.String
  public func effectiveUrl() -> Foundation.URL?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum ErrorResponse : Swift.Error {
  case error(Swift.Int, Foundation.Data?, Swift.Error)
}
open class Response<T> {
  final public let statusCode: Swift.Int
  final public let header: [Swift.String : Swift.String]
  final public let body: T?
  public init(statusCode: Swift.Int, header: [Swift.String : Swift.String], body: T?)
  convenience public init(response: Foundation.HTTPURLResponse, body: T?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MIMIKDriveProvider : ObjectiveC.NSObject {
  
  #if compiler(>=5.3) && $AsyncAwait
  public class func files(userAccessToken: Swift.String, edgeEngineRuntimeLink: Foundation.URLComponents, driveMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice) async -> [MIMIKEdgeClientCore.MIMIKDriveFile]?
  #endif

  @objc override dynamic public init()
  @objc deinit
}
public struct MIMIKHealthCheck : Swift.Codable {
  public enum Result : Swift.String {
    case unknown
    case expected
    case unexpectedContinue
    case unexpectedFail
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc public class Response : ObjectiveC.NSObject {
    public var service: MIMIKEdgeClientCore.MIMIKService
    public var result: MIMIKEdgeClientCore.MIMIKHealthCheck.Result
    public var message: Swift.String
    @objc override dynamic public var description: Swift.String {
      @objc get
    }
    public init(service: MIMIKEdgeClientCore.MIMIKService, result: MIMIKEdgeClientCore.MIMIKHealthCheck.Result, message: Swift.String)
    @objc deinit
  }
  public struct HealthCheckClusterStatus : Swift.Codable {
    public var nbServers: Swift.String?
    public var updatedAt: Foundation.Date?
    public init(nbServers: Swift.String?, updatedAt: Foundation.Date?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct HealthCheckDeploymentGitRepo : Swift.Codable {
    public var branch: Swift.String?
    public var hashKey: Swift.String?
    public init(branch: Swift.String?, hashKey: Swift.String?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct HealthCheckDeployment : Swift.Codable {
    public var gitRepo: MIMIKEdgeClientCore.MIMIKHealthCheck.HealthCheckDeploymentGitRepo?
    public var time: Swift.String?
    public init(gitRepo: MIMIKEdgeClientCore.MIMIKHealthCheck.HealthCheckDeploymentGitRepo?, time: Swift.String?)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public var swaggerFileVersion: Swift.String?
  public var type: Swift.String?
  public var uptime: Foundation.Decimal?
  public var version: Swift.String?
  public var registrationStatus: Swift.String?
  public var port: Swift.String?
  public var platform: Swift.String?
  public var pidValue: Swift.Int?
  public var nodeVersion: Swift.String?
  public var name: Swift.String?
  public var memoryUsage: MIMIKEdgeClientCore.JSONValue?
  public var location: MIMIKEdgeClientCore.JSONValue?
  public var id: Swift.String?
  public var environment: Swift.String?
  public var deployment: MIMIKEdgeClientCore.MIMIKHealthCheck.HealthCheckDeployment?
  public var cpuUsage: MIMIKEdgeClientCore.JSONValue?
  public var clusterStatus: MIMIKEdgeClientCore.MIMIKHealthCheck.HealthCheckClusterStatus?
  public var addresses: MIMIKEdgeClientCore.JSONValue?
  public init(swaggerFileVersion: Swift.String?, type: Swift.String?, uptime: Foundation.Decimal?, version: Swift.String?, registrationStatus: Swift.String?, port: Swift.String?, platform: Swift.String?, pidValue: Swift.Int?, nodeVersion: Swift.String?, name: Swift.String?, memoryUsage: MIMIKEdgeClientCore.JSONValue?, location: MIMIKEdgeClientCore.JSONValue?, id: Swift.String?, environment: Swift.String?, deployment: MIMIKEdgeClientCore.MIMIKHealthCheck.HealthCheckDeployment?, cpuUsage: MIMIKEdgeClientCore.JSONValue?, clusterStatus: MIMIKEdgeClientCore.MIMIKHealthCheck.HealthCheckClusterStatus?, addresses: MIMIKEdgeClientCore.JSONValue?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc final public class MIMIKAuthorization : ObjectiveC.NSObject {
  public enum AccountAssociationAction : Swift.String {
    case authorize
    case unauthorize
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum TokenType : Swift.String {
    case edgeEngineAccessToken
    case custom
    case driveAccessToken
    case userAccessToken
    case validationCodes
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum GrantType : Swift.String {
    case phoneNumberStart
    case phoneNumber
    case emailPassword
    case idTokenSignin
    case trustTokenSignin
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum GrantAction : Swift.String {
    case register
    case login
    case changePassword
    case resetPassword
    case resetPasswordApply
    case loginApply
    case emptyActionPhoneNumber
    case emptyActionIdToken
    case emptyActionDeveloperIdToken
    case emptyActionFederation
    case emptyActionCreateEmail
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct ValidationCodes {
    public var mfaCode: Swift.String? {
      get
    }
    public var oobCode: Swift.String? {
      get
    }
    public var bindingCode: Swift.String? {
      get
    }
    public init(mfaCode: Swift.String?, oobCode: Swift.String?, bindingCode: Swift.String?)
    public var description: Swift.String {
      get
    }
  }
  @objc override final public var description: Swift.String {
    @objc get
  }
  convenience public init?(validationCodes: MIMIKEdgeClientCore.MIMIKAuthorization.ValidationCodes)
  required public init?(type: MIMIKEdgeClientCore.MIMIKAuthorization.TokenType?, userAccessToken: Swift.String?, idToken: Swift.String? = nil, refreshToken: Swift.String? = nil, validationCodes: MIMIKEdgeClientCore.MIMIKAuthorization.ValidationCodes? = nil, accessTokenExpirationDate: Foundation.Date? = nil, tokenType: Swift.String? = nil, scope: Swift.String? = nil)
  final public func userAccessToken() -> Swift.String?
  final public func idToken() -> Swift.String?
  final public func refreshToken() -> Swift.String?
  final public func validationCodes() -> MIMIKEdgeClientCore.MIMIKAuthorization.ValidationCodes?
  final public func userAccessTokenSeemsComplete() -> Swift.Bool
  final public func userAccessTokenDecoded() -> JWTDecode.JWT?
  final public func userAccessTokenExpiryDate() -> Foundation.Date?
  @objc deinit
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  public typealias PagingHandler = (_ paging: MIMIKEdgeClientCore.MIMIKEdgeClient.PagingInfo?) -> Swift.Void
  @objc public class PagingInfo : ObjectiveC.NSObject {
    final public let count: Swift.Int
    final public let startAfter: Swift.String
    public init(count: Swift.Int, startAfter: Swift.String)
    @objc deinit
  }
}
@objc public class MIMIKBeamTokenData : ObjectiveC.NSObject, Foundation.NSCoding, Swift.Codable {
  public var data: [MIMIKEdgeClientCore.MIMIKBeamToken]?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public init(data: [MIMIKEdgeClientCore.MIMIKBeamToken]?)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  public class func parseBeamTokens(data: Foundation.Data) -> [MIMIKEdgeClientCore.MIMIKBeamToken]?
  public class func parseBeamToken(data: Foundation.Data) -> MIMIKEdgeClientCore.MIMIKBeamToken?
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  final public class func workingDirectory(searchPathDirectory: Foundation.FileManager.SearchPathDirectory, subFolder: Swift.String, filename: Swift.String? = nil) -> Foundation.URL?
  final public class func edgeEngineWorkingDirectory() -> Foundation.URL?
}
public struct ModelError : Swift.Codable {
  public var statusCode: Swift.Int
  public var title: Swift.String
  public var message: Swift.String
  public var info: MIMIKEdgeClientCore.JSONValue?
  public init(statusCode: Swift.Int, title: Swift.String, message: Swift.String, info: MIMIKEdgeClientCore.JSONValue?)
  public func mimikDescription() -> Swift.String
  public func userInfo() -> [Swift.String : Any]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class JSONEncodingHelper {
  open class func encodingParameters<T>(forEncodableObject encodableObj: T?) -> Alamofire.Parameters? where T : Swift.Encodable
  open class func encodingParameters(forEncodableObject encodableObj: Any?) -> Alamofire.Parameters?
  @objc deinit
}
@objc public class MIMIKNodeRouting : ObjectiveC.NSObject, Foundation.NSCoding, Swift.Codable {
  public var id: Swift.String?
  public var port: Swift.Int64?
  public var url: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public init(id: Swift.String?, port: Swift.Int64?, url: Swift.String?)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension MIMIKEdgeClientCore.MIMIKBeamProvider {
  
  #if compiler(>=5.3) && $AsyncAwait
  public class func deleteBeamToken(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beamToken: MIMIKEdgeClientCore.MIMIKBeamToken, beamOwnerCode: Swift.String, beamMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice) async -> MIMIKEdgeClientCore.MIMIKBeamToken?
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  public class func updateBeamToken(status: MIMIKEdgeClientCore.MIMIKBeamToken.TokenStatus, edgeServiceLink: Swift.String, userAccessToken: Swift.String, beamToken: MIMIKEdgeClientCore.MIMIKBeamToken, beamOwnerCode: Swift.String, beamMicroservice: MIMIKEdgeClientCore.MIMIKMicroservice) async -> MIMIKEdgeClientCore.MIMIKBeamToken?
  #endif

}
@objc @_inheritsConvenienceInitializers final public class MIMIKEdgeClientIdentity : ObjectiveC.NSObject {
  public static let kSwaggerFileVersion: Swift.String
  public static let kServiceType: MIMIKEdgeClientCore.MIMIKService.ServiceType
  public static let kHealthCheckPath: Swift.String
  final public class func swaggerFileVersion() -> Swift.String
  final public class func serviceType() -> MIMIKEdgeClientCore.MIMIKService.ServiceType
  final public class func serviceConfiguration(rootUrl: Foundation.URL, clientId: Swift.String, authScopes: [Swift.String]? = []) -> MIMIKEdgeClientCore.MIMIKService
  final public class func healthCheckPath() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension MIMIKEdgeClientCore.MIMIKEdgeClient {
  
  #if compiler(>=5.3) && $AsyncAwait
  final public func authenticateEdgeEngineAccess(service: MIMIKEdgeClientCore.MIMIKService, developerIdToken: Swift.String, edgeEngineIdToken: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKAuthorization, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func authenticateEdgeEngineAccess(service: MIMIKEdgeClientCore.MIMIKService, phoneNumber: Swift.String, edgeEngineIdToken: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKAuthorization, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func authenticateEdgeEngineAccess(service: MIMIKEdgeClientCore.MIMIKService, grantAction: MIMIKEdgeClientCore.MIMIKAuthorization.GrantAction, email: Swift.String, currentPassword: Swift.String?, newPassword: Swift.String?, edgeEngineIdToken: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKAuthorization, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func validateEdgeEngineAccess(service: MIMIKEdgeClientCore.MIMIKService, grantType: MIMIKEdgeClientCore.MIMIKAuthorization.GrantType, grantAction: MIMIKEdgeClientCore.MIMIKAuthorization.GrantAction, codes: MIMIKEdgeClientCore.MIMIKAuthorization.ValidationCodes, edgeEngineIdToken: Swift.String?, currentPassword: Swift.String? = nil, newPassword: Swift.String? = nil) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKAuthorization, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func authenticateUserAccess(service: MIMIKEdgeClientCore.MIMIKService, edgeEngineAccessAuthorization: MIMIKEdgeClientCore.MIMIKAuthorization) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKAuthorization, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func authenticateUserAccess(service: MIMIKEdgeClientCore.MIMIKService, federatedToken: Swift.String, policyId: Swift.String, edgeEngineIdToken: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKAuthorization, Foundation.NSError>
  #endif

  final public func authenticateClientLibrary(userAccessAuthorization: MIMIKEdgeClientCore.MIMIKAuthorization) -> Swift.Result<MIMIKEdgeClientCore.MIMIKAuthorization, Foundation.NSError>
  final public func authenticateClientLibrary(userAccessToken: Swift.String) -> Swift.Result<MIMIKEdgeClientCore.MIMIKAuthorization, Foundation.NSError>
  
  #if compiler(>=5.3) && $AsyncAwait
  final public func deleteAccount(service: MIMIKEdgeClientCore.MIMIKService, accessToken: Swift.String) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.IdentityUser, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func accountInformation(service: MIMIKEdgeClientCore.MIMIKService) async -> Swift.Result<MIMIKEdgeClientCore.MIMIKEdgeClient.IdentityUser, Foundation.NSError>
  #endif

  
  #if compiler(>=5.3) && $AsyncAwait
  final public func supportedAuthenticationScopes(serverUrl: Foundation.URL) async -> Swift.Result<[Swift.String], Foundation.NSError>
  #endif

}
open class MIMIKURLComponentsBuilder {
  public init()
  open func create() -> Foundation.URLComponents
  open func set(service: MIMIKEdgeClientCore.MIMIKService) -> MIMIKEdgeClientCore.MIMIKURLComponentsBuilder
  open func set(path: Swift.String) -> MIMIKEdgeClientCore.MIMIKURLComponentsBuilder
  open func set(queryItems: [Swift.String : Any]) -> MIMIKEdgeClientCore.MIMIKURLComponentsBuilder
  open func set(scheme: Swift.String) -> MIMIKEdgeClientCore.MIMIKURLComponentsBuilder
  open func set(host: Swift.String) -> MIMIKEdgeClientCore.MIMIKURLComponentsBuilder
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MIMIKRequest : ObjectiveC.NSObject {
  public enum Method : Swift.String {
    case put
    case post
    case delete
    case get
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public class func authorizedBackendUrlRequest(service: MIMIKEdgeClientCore.MIMIKService, path: Swift.String, queryItems: [Foundation.URLQueryItem], authorization: MIMIKEdgeClientCore.MIMIKAuthorization?, method: MIMIKEdgeClientCore.MIMIKRequest.Method, dictionary: [Swift.String : Any]?) -> Swift.Result<Foundation.URLRequest, Foundation.NSError>
  @available(*, deprecated, renamed: "backendEncodedUrlRequest")
  public class func backendEncodedUrlRequestFrom(urlRequest: Foundation.URLRequest, dictionary: [Swift.String : Any]) -> Foundation.URLRequest?
  @available(*, deprecated, renamed: "backendEncodedUrlRequest")
  public class func backendEncodedUrlRequestFrom(urlRequest: Foundation.URLRequest) -> Foundation.URLRequest?
  public class func backendEncodedUrlRequest(urlRequest: Foundation.URLRequest, dictionary: [Swift.String : Any]?) -> Foundation.URLRequest?
  public class func backendUrlRequestFrom(authorization: MIMIKEdgeClientCore.MIMIKAuthorization, url: Foundation.URL, method: MIMIKEdgeClientCore.MIMIKRequest.Method, httpHeaders: Alamofire.HTTPHeaders? = nil) -> Foundation.URLRequest?
  public class func backendUrlRequestFrom(authorization: MIMIKEdgeClientCore.MIMIKAuthorization, path: Swift.String, method: MIMIKEdgeClientCore.MIMIKRequest.Method, httpHeaders: Alamofire.HTTPHeaders? = nil) -> Foundation.URLRequest?
  public class func frontendUrlRequest(microservice: MIMIKEdgeClientCore.MIMIKMicroservice, authorization: MIMIKEdgeClientCore.MIMIKAuthorization, url: Foundation.URL, method: MIMIKEdgeClientCore.MIMIKRequest.Method, dictionary: [Swift.String : Any]?, timeoutInterval: Foundation.TimeInterval = 60.0, cachePolicy: Foundation.URLRequest.CachePolicy = .useProtocolCachePolicy) -> Foundation.URLRequest?
  @objc override dynamic public init()
  @objc deinit
}
extension MIMIKEdgeClientCore.MIMIKBeam.ReadStatus : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKBeam.ReadStatus : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKBeam.ReadStatus : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.IdentityResponse.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.IdentityResponse.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.IdentityResponse.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.IdentityUser.CodingKeys : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.IdentityUser.CodingKeys : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.IdentityUser.CodingKeys : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKMicroservice.MicroserviceType : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKMicroservice.MicroserviceType : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKMicroservice.MicroserviceType : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKService.ServiceType : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKService.ServiceType : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKService.ServiceType : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKBeamToken.TokenStatus : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKBeamToken.TokenStatus : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKBeamToken.TokenStatus : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Backend : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Backend : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKEdgeClient.Backend : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKClusterProvider.ClusterType : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKClusterProvider.ClusterType : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKClusterProvider.ClusterType : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKLog.Level : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKLog.Level : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKLog.Level : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKHealthCheck.Result : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKHealthCheck.Result : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKHealthCheck.Result : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKAuthorization.AccountAssociationAction : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKAuthorization.AccountAssociationAction : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKAuthorization.AccountAssociationAction : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKAuthorization.TokenType : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKAuthorization.TokenType : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKAuthorization.TokenType : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKAuthorization.GrantType : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKAuthorization.GrantType : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKAuthorization.GrantType : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKAuthorization.GrantAction : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKAuthorization.GrantAction : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKAuthorization.GrantAction : Swift.RawRepresentable {}
extension MIMIKEdgeClientCore.MIMIKRequest.Method : Swift.Equatable {}
extension MIMIKEdgeClientCore.MIMIKRequest.Method : Swift.Hashable {}
extension MIMIKEdgeClientCore.MIMIKRequest.Method : Swift.RawRepresentable {}
